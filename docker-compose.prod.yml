version: '1'

services:
  db:
    restart: always
    image: postgres
    volumes:
      - zalon_design_volume:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - web_network

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod # Use the specific Dockerfile for the build
    command: >
      sh -c "python manage.py migrate && python manage.py collectstatic
      --no-input && gunicorn backend.wsgi:application -b 0.0.0.0:8000"
    volumes:
      - .:/code
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web_network

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./web_nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./static:/code/static
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro 
    ports:
      - '80:80'
    depends_on:
      - web
    networks:
      - web_network


   certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
   

volumes:
  zalon_design_volume:

networks:
  web_network:
    driver: bridge
